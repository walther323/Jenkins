
--------------------------------------------
--------------------------------------------
Notas curso basico Jenkins - Platzi
--------------------------------------------
--------------------------------------------

pendiente los anteriores puntos





*** Jenkins y su ecosistema de Plugins ***

  unidades que extienden jenkins
  
  Una de las razones por la cual Jenkins es adorado es porque tiene Plugins para una mayoría de cosas.
  Los plugins son unidades que extiende a Jenkins, después de instalarlo nuestra herramienta puede hacer algo nuevo, 
  es recomendado instalarlos con la opción de ““Download now and Install after restart”” y así Jenkins se va a encargar 
  de ejecutar todos los Jobs que estaban corriendo y cuando eso termine, lo va a instalar.
  
  ruta dentro de jenkins para la administracion de los plugins
    http://localhost:8080/pluginManager/
      todos los plugins
        buscar el plugin que se necesita
          --> recomendacion: descargar ahora y reintalar despues de reiniciar
            --> dejar el check de reinstalar jenkis cuando la instalacion este completa
  
  una vez instalado, ir a la adminstracion >> configuracion global, seleccionar nodejs e instalar la version que se necesite >> save
  
  
 
  
  *** Cadenas de Jobs *** 
  
  Primero instalamos el plugin Parameterized Trigger, igual cómo instalamos anteriormente y reiniciamos.

  Luego vamos a crear 2 jobs nuevos:
  
  watchers: 
  
  En este job, vamos a configure y vamos a “Build after other projects are built” y escribimos y escribimos hello-platzi, 
  sí hello-platzi es successful, quiero que se ejecute watchers.Y en la parte de executed shell, 
  escribimos : echo “Running after hello-platzi success” y guardamos.  
  
  parameterized: 
  
  Acepta parámetros cuando lo llamo. 
  Marcamos la opción “ This project is parameterized” y en el name escribimos ROOT_ID.
  Y en el execute shell: echo “calle with $ROOT_ID” y guardamos.
  Y en hello-platzi, en Downstream project, y estos se añaden cuando jenkins se da cuenta que su job tiene una dependencia con otro.
  
  Vamos al configure de hello-platzi y en el execute shell escribimos:
  
  echo “Hello Platzi from $NAME” Y añadir un build step que se llama : “Trigger/call build on other projects”, 
  y en projects to build escribimos parameterized y le damos en añadir parámetros, luego parámetros predefinidos y 
  escribimos: ROOT_ID=$BUILD_NUMBER
  
  BUILD_NUMBER es una variable de entorno, que es el valor de esta ejecución y guardamos.

  Le damos en “build with parameters” y entramos al console output de parameterized y vemos que la ejecución número tal, fue la que ejecutó a 
  parameterized. Corre hello-platzi, él llama declarativamente a parameterized e indirectamente a watchers.

  Corre los test para esta versión, cuando acabes, mandame esta versión a producción le pasó el id del commit, y se lo pasó a mí job que hace 
  deployment y cuando lo resuelvas me lo despliegas.  El sabe la cadena de ejecuciones que tuvo, y cuál fue el que inició este proceso.

  
  
 *** Connectándonos a GitHub ****
 
 Es posible conectar un repositorio de GitHub a Jenkins para que cada vez que exista un push se haga un build del source code. 
 Para que esto sea posible debemos realizar cambios tanto en Jenkins como en GitHub.

En Jenkins:

1- Debemos tener el GitHub plugin instalado
2- Al crear el Job, debemos marcar el SCM la opción de Git, y pegar la URL del repo. (Para esta acción el host de Jenkins debe tener instalado Git)
3- En el apartado "branches to build" si dejamos en blanco tomara en cuenta cualquier branch. 
4- En "Build Triggers" debemos marcar la opción "GitHub hook trigger for GITScm polling"

En GitHub:

1- Vamos al repo de GitHub.
2- Entramos en Settings -> Webhooks.
3- Añadimos un nuevo Webhook.
4- Añadimos la Payload URL. (Si la URL no acaba en /github-webhook/ GItHub lanzara un error.)
5- Marcar "Just the push event"



**** ¿Qué es un 'Pipeline'? ****

Pipelines nos permiten configurar nuestros Jobs con código en lugar de hacerlo en la interfaz visual. 
En Jenkins los hay de dos maneras: Scripting y Declarative.

Pipeline concepts
The following concepts are key aspects of Jenkins Pipeline, which tie in closely to Pipeline syntax (see the overview below).

    Pipeline: A Pipeline is a user-defined model of a CD pipeline. A Pipeline’s code defines your entire build process, 
              which typically includes stages for building an application, testing it and then delivering it.
              
    Node: A node is a machine which is part of the Jenkins environment and is capable of executing a Pipeline.
    
    Stage: A stage block defines a conceptually distinct subset of tasks performed through the entire Pipeline 
          (e.g. “Build”, “Test” and “Deploy” stages), which is used by many plugins to visualize or present Jenkins Pipeline status/progress. [6]
          
    Step: A single task. Fundamentally, a step tells Jenkins what to do at a particular point in time (or “step” in the process). 
          For example, to execute the shell command make use the sh step: sh ‘make’. When a plugin extends the Pipeline DSL, [1] t
          hat typically means the plugin has implemented a new step.
          
          
 
 *** ¿Cómo puedo acelerar mi development de Pipelines? ***
 
 Replay:
 --> No ha necesidad de hacer un commit para volver a ejecutar algun build en un punto especifico, y ademas se puede cambiar los steps.
 Ideal para probar.
